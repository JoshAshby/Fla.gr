#!/usr/bin/env python




##################################################
## DEPENDENCIES
import sys
import os
import os.path
try:
    import builtins as builtin
except ImportError:
    import __builtin__ as builtin
from os.path import getmtime, exists
import time
import types
from Cheetah.Version import MinCompatibleVersion as RequiredCheetahVersion
from Cheetah.Version import MinCompatibleVersionTuple as RequiredCheetahVersionTuple
from Cheetah.Template import Template
from Cheetah.DummyTransaction import *
from Cheetah.NameMapper import NotFound, valueForName, valueFromSearchList, valueFromFrameOrSearchList
from Cheetah.CacheRegion import CacheRegion
import Cheetah.Filters as Filters
import Cheetah.ErrorCatchers as ErrorCatchers
from bootstrapSkeleton import bootstrapSkeleton

##################################################
## MODULE CONSTANTS
VFFSL=valueFromFrameOrSearchList
VFSL=valueFromSearchList
VFN=valueForName
currentTime=time.time
__CHEETAH_version__ = '2.4.4'
__CHEETAH_versionTuple__ = (2, 4, 4, 'development', 0)
__CHEETAH_genTime__ = 1362331096.422108
__CHEETAH_genTimestamp__ = 'Sun Mar  3 10:18:16 2013'
__CHEETAH_src__ = 'interface/templates/user/userFlagsTmpl.tmpl'
__CHEETAH_srcLastModified__ = 'Wed Feb 27 10:44:00 2013'
__CHEETAH_docstring__ = 'Autogenerated by Cheetah: The Python-Powered Template Engine'

if __CHEETAH_versionTuple__ < RequiredCheetahVersionTuple:
    raise AssertionError(
      'This template was compiled with Cheetah version'
      ' %s. Templates compiled before version %s must be recompiled.'%(
         __CHEETAH_version__, RequiredCheetahVersion))

##################################################
## CLASSES

class userFlagsTmpl(bootstrapSkeleton):

    ##################################################
    ## CHEETAH GENERATED METHODS


    def __init__(self, *args, **KWs):

        super(userFlagsTmpl, self).__init__(*args, **KWs)
        if not self._CHEETAH__instanceInitialized:
            cheetahKWArgs = {}
            allowedKWs = 'searchList namespaces filter filtersLib errorCatcher'.split()
            for k,v in KWs.items():
                if k in allowedKWs: cheetahKWArgs[k] = v
            self._initCheetahInstance(**cheetahKWArgs)
        

    def body(self, **KWS):



        ## CHEETAH: generated from #def body at line 3, col 1.
        trans = KWS.get("trans")
        if (not trans and not self._CHEETAH__isBuffering and not callable(self.transaction)):
            trans = self.transaction # is None unless self.awake() was called
        if not trans:
            trans = DummyTransaction()
            _dummyTrans = True
        else: _dummyTrans = False
        write = trans.response().write
        SL = self._CHEETAH__searchList
        _filter = self._CHEETAH__currentFilter
        
        ########################################
        ## START - generated method body
        
        if VFFSL(SL,"flags",True): # generated from line 4, col 1
            for flag in VFFSL(SL,"flags",True): # generated from line 5, col 5
                write(u'''        <!-- Start of flag overview template -->
        <div class="row">
            <div class="media">
                <a href="''')
                _v = VFFSL(SL,"flag.id",True) # u'$flag.id' on line 9, col 26
                if _v is not None: write(_filter(_v, rawExpr=u'$flag.id')) # from line 9, col 26.
                write(u'''">
                    <i class="span1 icon-''')
                if VFN(VFFSL(SL,"flag",True),"has_key",False)('url') and VFFSL(SL,"flag.url",True): # generated from line 10, col 42
                    write(u'''bookmark''')
                else: # generated from line 10, col 89
                    write(u'''list-alt''')
                write(u''' icon-4x media-object pull-left"></i>
                </a>
                <div class="media-body">
                    <div class="row media-heading">
                        <div class="span3">
                            <h3>
                                <a href="''')
                _v = VFFSL(SL,"flag.id",True) # u'$flag.id' on line 16, col 42
                if _v is not None: write(_filter(_v, rawExpr=u'$flag.id')) # from line 16, col 42.
                write(u'''">''')
                _v = VFFSL(SL,"flag.title",True) # u'$flag.title' on line 16, col 52
                if _v is not None: write(_filter(_v, rawExpr=u'$flag.title')) # from line 16, col 52.
                write(u'''</a>
                                <small>
                                    <a href="''')
                _v = VFFSL(SL,"flag.author",True) # u'$flag.author' on line 18, col 46
                if _v is not None: write(_filter(_v, rawExpr=u'$flag.author')) # from line 18, col 46.
                write(u'''">''')
                _v = VFFSL(SL,"flag.author",True) # u'$flag.author' on line 18, col 60
                if _v is not None: write(_filter(_v, rawExpr=u'$flag.author')) # from line 18, col 60.
                write(u'''</a>
                                </small>
                            </h3>
                        </div>
                        <div class="span5 pull-right">
                            <div class="well">
                                <div class="span">
                                    <i class="icon-calendar muted"></i> <small class="muted">''')
                _v = VFFSL(SL,"flag.date",True) # u'$flag.date' on line 25, col 94
                if _v is not None: write(_filter(_v, rawExpr=u'$flag.date')) # from line 25, col 94.
                write(u'''</small>
                                </div>
                                <div class="span">
''')
                if VFFSL(SL,"flag.visible",True): # generated from line 28, col 37
                    write(u'''                                        <span class="label"><i class="icon-unlock"></i> Public</span>
''')
                else: # generated from line 30, col 37
                    write(u'''                                        <span class="label"><i class="icon-lock"></i> Private</span>
''')
                write(u'''                                </div>
                                <div class="span pull-right">
                                    <div class="btn-group">
                                        <a class="btn-info btn-small btn" rel="tooltip" href="#editFlag" data-original-title="Edit flag" data-placement="bottom" href="''')
                _v = VFFSL(SL,"flag.id",True) # u'$flag.id' on line 36, col 168
                if _v is not None: write(_filter(_v, rawExpr=u'$flag.id')) # from line 36, col 168.
                write(u'''">
                                            <i class="icon-edit"></i>
                                        </a>
                                        <a class="btn-danger btn-small btn" rel="tooltip" href="#deleteFlag" data-original-title="Delete Flag" data-placement="bottom" href="''')
                _v = VFFSL(SL,"flag.id",True) # u'$flag.id' on line 39, col 174
                if _v is not None: write(_filter(_v, rawExpr=u'$flag.id')) # from line 39, col 174.
                write(u'''">
                                            <i class="icon-trash"></i>
                                        </a>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>

                    ''')
                _v = VFFSL(SL,"flag.content",True) # u'$flag.content' on line 48, col 21
                if _v is not None: write(_filter(_v, rawExpr=u'$flag.content')) # from line 48, col 21.
                write(u'''

                    <br>

''')
                if VFN(VFFSL(SL,"flag",True),"has_key",False)('labels') and VFFSL(SL,"flag.labels",True): # generated from line 52, col 21
                    write(u'''                        <b class="muted"><i class="icon-tags"></i> Labels: </b>
''')
                    for label in VFFSL(SL,"flag.labels",True): # generated from line 54, col 29
                        write(u'''                                <a href="''')
                        _v = VFFSL(SL,"label",True) # u'$label' on line 55, col 42
                        if _v is not None: write(_filter(_v, rawExpr=u'$label')) # from line 55, col 42.
                        write(u'''"><span class="label label-info">''')
                        _v = VFFSL(SL,"label",True) # u'$label' on line 55, col 81
                        if _v is not None: write(_filter(_v, rawExpr=u'$label')) # from line 55, col 81.
                        write(u'''</span></a>
''')
                    write(u'''                        <br>
''')
                if VFN(VFFSL(SL,"flag",True),"has_key",False)('url') and VFFSL(SL,"flag.url",True): # generated from line 59, col 21
                    write(u'''                        <b class="muted"><i class="icon-external-link"></i> Link: </b> <a href="''')
                    _v = VFFSL(SL,"flag.url",True) # u'$flag.url' on line 60, col 97
                    if _v is not None: write(_filter(_v, rawExpr=u'$flag.url')) # from line 60, col 97.
                    write(u'''">''')
                    _v = VFFSL(SL,"flag.url",True) # u'$flag.url' on line 60, col 108
                    if _v is not None: write(_filter(_v, rawExpr=u'$flag.url')) # from line 60, col 108.
                    write(u'''</a><br>
''')
                write(u'''                </div>
            </div>
        </div>
        <hr>
        <!-- End of flag overview template -->
''')
        else: # generated from line 68, col 5
            write(u'''        <div class="page-header">
            <h1>Oh no! <small> It looks like we don\'t have any flags!</small></h1>
        </div>
        <p>If you want to make a new flag and help fill this void, feel free to do so!</p>
''')
        
        ########################################
        ## END - generated method body
        
        return _dummyTrans and trans.response().getvalue() or ""
        

    def rightExtra(self, **KWS):



        ## CHEETAH: generated from #def rightExtra at line 76, col 1.
        trans = KWS.get("trans")
        if (not trans and not self._CHEETAH__isBuffering and not callable(self.transaction)):
            trans = self.transaction # is None unless self.awake() was called
        if not trans:
            trans = DummyTransaction()
            _dummyTrans = True
        else: _dummyTrans = False
        write = trans.response().write
        SL = self._CHEETAH__searchList
        _filter = self._CHEETAH__currentFilter
        
        ########################################
        ## START - generated method body
        
        if VFFSL(SL,"page",True)=='flags' and VFFSL(SL,"flags",True): # generated from line 77, col 5
            write(u'''        <div class="span1">
            <ul class="nav nav-pills">
                <li class="active"><a href="#all"><i class="icon-flag"></i></a></li>
                <li><a href="#public"><i class="icon-unlock"></i></a></li>
                <li><a href="#private"><i class="icon-lock"></i></a></li>
            </ul>
        </div>
''')
        
        ########################################
        ## END - generated method body
        
        return _dummyTrans and trans.response().getvalue() or ""
        

    def writeBody(self, **KWS):



        ## CHEETAH: main method generated for this template
        trans = KWS.get("trans")
        if (not trans and not self._CHEETAH__isBuffering and not callable(self.transaction)):
            trans = self.transaction # is None unless self.awake() was called
        if not trans:
            trans = DummyTransaction()
            _dummyTrans = True
        else: _dummyTrans = False
        write = trans.response().write
        SL = self._CHEETAH__searchList
        _filter = self._CHEETAH__currentFilter
        
        ########################################
        ## START - generated method body
        
        write(u'''

''')
        
        ########################################
        ## END - generated method body
        
        return _dummyTrans and trans.response().getvalue() or ""
        
    ##################################################
    ## CHEETAH GENERATED ATTRIBUTES


    _CHEETAH__instanceInitialized = False

    _CHEETAH_version = __CHEETAH_version__

    _CHEETAH_versionTuple = __CHEETAH_versionTuple__

    _CHEETAH_genTime = __CHEETAH_genTime__

    _CHEETAH_genTimestamp = __CHEETAH_genTimestamp__

    _CHEETAH_src = __CHEETAH_src__

    _CHEETAH_srcLastModified = __CHEETAH_srcLastModified__

    _mainCheetahMethod_for_userFlagsTmpl= 'writeBody'

## END CLASS DEFINITION

if not hasattr(userFlagsTmpl, '_initCheetahAttributes'):
    templateAPIClass = getattr(userFlagsTmpl, '_CHEETAH_templateClass', Template)
    templateAPIClass._addCheetahPlumbingCodeToClass(userFlagsTmpl)


# CHEETAH was developed by Tavis Rudd and Mike Orr
# with code, advice and input from many other volunteers.
# For more information visit http://www.CheetahTemplate.org/

##################################################
## if run from command line:
if __name__ == '__main__':
    from Cheetah.TemplateCmdLineIface import CmdLineIface
    CmdLineIface(templateObj=userFlagsTmpl()).run()


