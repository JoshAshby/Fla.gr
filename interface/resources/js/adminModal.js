// Generated by CoffeeScript 1.5.0
(function() {
  var modalBase, modalTmpl, modalTmplPre,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  modalTmplPre = "<div id=\"requestModal\" class=\"modal hide fade\" tabindex=\"-1\" role=\"dialog\" aria-labeledby=\"requestModal\" aria-hidden=\"true\">\n    <div class=\"modal-header\">\n        <button type=\"button\" class=\"close\" data-dismiss=\"modal\" aria-hidden=\"true\"><i class=\"icon-remove\"></i></button>\n        <h3 class=\"text-{{textColor}}\"><i class=\"icon-{{icon}}\"></i> {{modalTitle}}</h3>\n    </div>\n    <div class=\"modal-body\">\n    <p class=\"text-{{textColor}}\">{{{text}}}</p>\n    </div>\n    <div class=\"modal-footer\">\n        <div class=\"btn-group\">\n            <a class=\"btn\" data-dismiss=\"modal\" aria-hidden=\"true\">Close</a>\n            <button class=\"btn btn-{{btnColor}}\" type=\"submit\" id=\"modalButton\" data-loading-text=\"{{btnLoadingText}}\"><i class=\"icon-{{icon}}\"></i> {{btnText}}</button>\n        </div>\n    </div>\n</div>";

  modalTmpl = Handlebars.compile(modalTmplPre);

  modalBase = (function() {
    /*
    Base modal object class
    
    Takes a title and a modal body text
    
    methods:
        make(data)
            places the modal into the div #modal
            data is an object with keys
                "btnText": ""
                "btnColor": ""
                "textColor": ""
                "icon": ""
                "btnLoadingText": ""
    */

    function modalBase(title, text) {
      this.title = title;
      this.text = text;
    }

    modalBase.prototype.make = function(data) {
      data["text"] = this.text;
      data["modalTitle"] = this.title;
      $("#modal").html(modalTmpl(data));
      $("#requestModal").modal();
      $("#requestModal").modal('show');
      $("#requestModal").on('shown', function() {
        $("#modalButton").button();
        return $("#modalButton").click(function() {
          return $(this).button('loading');
        });
      });
      /*
      Clear the HTML we threw into the page after the modal is gone,
      not sure if this is needed since the page probably will redirect
      */

      return $('#requestModal').on('hidden', function() {
        return $("modal").html("");
      });
    };

    return modalBase;

  })();

  this.deleteModal = (function(_super) {

    __extends(deleteModal, _super);

    function deleteModal() {
      deleteModal.__super__.constructor.apply(this, arguments);
    }

    deleteModal.prototype.make = function() {
      var modalData;
      modalData = {
        "btnText": "Delete",
        "btnColor": "danger",
        "textColor": "error",
        "icon": "trash",
        "btnLoadingText": "Deleting..."
      };
      return deleteModal.__super__.make.call(this, modalData);
    };

    return deleteModal;

  })(modalBase);

  this.editModal = (function(_super) {

    __extends(editModal, _super);

    function editModal() {
      editModal.__super__.constructor.apply(this, arguments);
    }

    editModal.prototype.make = function() {
      var modalData;
      modalData = {
        "btnText": "Edit",
        "btnColor": "primary",
        "textColor": "",
        "icon": "edit",
        "btnLoadingText": "Updating..."
      };
      return editModal.__super__.make.call(this, modalData);
    };

    return editModal;

  })(modalBase);

  this.grantModal = (function(_super) {

    __extends(grantModal, _super);

    function grantModal() {
      grantModal.__super__.constructor.apply(this, arguments);
    }

    grantModal.prototype.make = function() {
      var modalData;
      modalData = {
        "btnText": "Grant",
        "btnColor": "success",
        "textColor": "success",
        "icon": "ok",
        "btnLoadingText": "Granting..."
      };
      return grantModal.__super__.make.call(this, modalData);
    };

    return grantModal;

  })(modalBase);

  this.createModal = (function(_super) {

    __extends(createModal, _super);

    function createModal() {
      createModal.__super__.constructor.apply(this, arguments);
    }

    createModal.prototype.make = function() {
      var modalData;
      modalData = {
        "btnText": "Create",
        "btnColor": "info",
        "textColor": "info",
        "icon": "ok",
        "btnLoadingText": "Creating..."
      };
      return createModal.__super__.make.call(this, modalData);
    };

    return createModal;

  })(modalBase);

}).call(this);
